// <auto-generated />
using System;
using ConJob.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ConJob.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240415071351_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ConJob.Entities.ApplicantModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("apply_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("change_on")
                        .HasColumnType("int");

                    b.Property<DateTime>("create_on")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("job_id")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("job_id");

                    b.HasIndex("user_id");

                    b.ToTable("Applicants");
                });

            modelBuilder.Entity("ConJob.Entities.CategoryModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("change_on")
                        .HasColumnType("int");

                    b.Property<DateTime>("create_on")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("Categorys");
                });

            modelBuilder.Entity("ConJob.Entities.CommentModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("change_on")
                        .HasColumnType("int");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("create_on")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("post_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("post_id");

                    b.HasIndex("user_id");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ConJob.Entities.FileModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("change_on")
                        .HasColumnType("int");

                    b.Property<DateTime>("create_on")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("size")
                        .HasColumnType("float");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("ConJob.Entities.FollowModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("change_on")
                        .HasColumnType("int");

                    b.Property<DateTime>("create_on")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("from_user_id")
                        .HasColumnType("int");

                    b.Property<int>("to_user_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("from_user_id");

                    b.HasIndex("to_user_id");

                    b.ToTable("Follows");
                });

            modelBuilder.Entity("ConJob.Entities.JWTModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("change_on")
                        .HasColumnType("int");

                    b.Property<DateTime>("create_on")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("expired_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("token_hash_value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("user_id");

                    b.ToTable("JWTs");
                });

            modelBuilder.Entity("ConJob.Entities.JobModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<double>("budget")
                        .HasColumnType("float");

                    b.Property<int>("category_id")
                        .HasColumnType("int");

                    b.Property<int>("change_on")
                        .HasColumnType("int");

                    b.Property<DateTime>("create_on")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("expired_day")
                        .HasColumnType("datetime2");

                    b.Property<int>("job_type")
                        .HasColumnType("int");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("quanlity")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("category_id");

                    b.HasIndex("user_id");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("ConJob.Entities.LikeModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("change_on")
                        .HasColumnType("int");

                    b.Property<DateTime>("create_on")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("post_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("post_id");

                    b.HasIndex("user_id");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("ConJob.Entities.MessageModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("change_on")
                        .HasColumnType("int");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("create_on")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("receive_user_id")
                        .HasColumnType("int");

                    b.Property<int>("send_user_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("receive_user_id");

                    b.HasIndex("send_user_id");

                    b.ToTable("MessageModel");
                });

            modelBuilder.Entity("ConJob.Entities.NotificationModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("change_on")
                        .HasColumnType("int");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("create_on")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("from_user_notifi_id")
                        .HasColumnType("int");

                    b.Property<bool>("is_accept")
                        .HasColumnType("bit");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.Property<int>("to_user_notifi_id")
                        .HasColumnType("int");

                    b.Property<int>("to_user_notiofi_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("from_user_notifi_id");

                    b.HasIndex("to_user_notifi_id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ConJob.Entities.Personal_skillModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("change_on")
                        .HasColumnType("int");

                    b.Property<DateTime>("create_on")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("desciption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("exp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("skill_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("skill_id");

                    b.HasIndex("user_id");

                    b.ToTable("Personal_skillModel");
                });

            modelBuilder.Entity("ConJob.Entities.PostModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("caption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("change_on")
                        .HasColumnType("int");

                    b.Property<DateTime>("create_on")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("file_id")
                        .HasColumnType("int");

                    b.Property<bool>("is_actived")
                        .HasColumnType("bit");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("bit");

                    b.Property<int>("job_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("file_id");

                    b.HasIndex("job_id");

                    b.HasIndex("user_id");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("ConJob.Entities.ReportModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("change_on")
                        .HasColumnType("int");

                    b.Property<DateTime>("create_on")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("post_id")
                        .HasColumnType("int");

                    b.Property<string>("reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("post_id");

                    b.HasIndex("user_id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("ConJob.Entities.RoleModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("change_on")
                        .HasColumnType("int");

                    b.Property<DateTime>("create_on")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("role_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("role_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            id = 1,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            role_description = "Là admin cuyền lực.",
                            role_name = "Admin"
                        },
                        new
                        {
                            id = 2,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            role_description = "Là nole tư bản đi tìm kiếm miếng cơm manh áo.",
                            role_name = "TimViec"
                        },
                        new
                        {
                            id = 3,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            role_description = "Là tư bản đi kiếm những con chiêng ngoan đạo.",
                            role_name = "PhatViec"
                        });
                });

            modelBuilder.Entity("ConJob.Entities.SkillModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("change_on")
                        .HasColumnType("int");

                    b.Property<DateTime>("create_on")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("ConJob.Entities.UserModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("avatar")
                        .HasColumnType("text");

                    b.Property<int>("change_on")
                        .HasColumnType("int");

                    b.Property<DateTime>("create_on")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("fcm_token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("first_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("gender")
                        .HasColumnType("int");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("is_email_confirmed")
                        .HasColumnType("bit");

                    b.Property<string>("last_name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("phone_number")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            id = 6,
                            address = "Hue",
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            dob = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            email = "admin@com.com",
                            first_name = "Admin",
                            gender = 0,
                            is_deleted = false,
                            is_email_confirmed = false,
                            last_name = "Dat",
                            password = "$2a$11$Y1F5FkGMA6GFI3xWgqF4F./ofjy7wCn3ag/nnej0YJKMg1ey2axJ2",
                            phone_number = "0335487991"
                        });
                });

            modelBuilder.Entity("ConJob.Entities.UserRoleModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("change_on")
                        .HasColumnType("int");

                    b.Property<DateTime>("create_on")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("role_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("role_id");

                    b.HasIndex("user_id");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            id = 1,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            role_id = 1,
                            user_id = 6
                        });
                });

            modelBuilder.Entity("ConJob.Entities.ApplicantModel", b =>
                {
                    b.HasOne("ConJob.Entities.JobModel", "jobs")
                        .WithMany("applicants")
                        .HasForeignKey("job_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConJob.Entities.UserModel", "users")
                        .WithMany("applicants")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("jobs");

                    b.Navigation("users");
                });

            modelBuilder.Entity("ConJob.Entities.CommentModel", b =>
                {
                    b.HasOne("ConJob.Entities.PostModel", "posts")
                        .WithMany("comments")
                        .HasForeignKey("post_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConJob.Entities.UserModel", "users")
                        .WithMany("comments")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("posts");

                    b.Navigation("users");
                });

            modelBuilder.Entity("ConJob.Entities.FollowModel", b =>
                {
                    b.HasOne("ConJob.Entities.UserModel", "from_user_follows")
                        .WithMany("followers")
                        .HasForeignKey("from_user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ConJob.Entities.UserModel", "to_user_follows")
                        .WithMany("following")
                        .HasForeignKey("to_user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("from_user_follows");

                    b.Navigation("to_user_follows");
                });

            modelBuilder.Entity("ConJob.Entities.JWTModel", b =>
                {
                    b.HasOne("ConJob.Entities.UserModel", "users")
                        .WithMany("jwts")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("users");
                });

            modelBuilder.Entity("ConJob.Entities.JobModel", b =>
                {
                    b.HasOne("ConJob.Entities.CategoryModel", "categorys")
                        .WithMany("jobs")
                        .HasForeignKey("category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConJob.Entities.UserModel", "users")
                        .WithMany("jobs")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("categorys");

                    b.Navigation("users");
                });

            modelBuilder.Entity("ConJob.Entities.LikeModel", b =>
                {
                    b.HasOne("ConJob.Entities.PostModel", "post")
                        .WithMany("likes")
                        .HasForeignKey("post_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConJob.Entities.UserModel", "users")
                        .WithMany("likes")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("post");

                    b.Navigation("users");
                });

            modelBuilder.Entity("ConJob.Entities.MessageModel", b =>
                {
                    b.HasOne("ConJob.Entities.UserModel", "receive_users")
                        .WithMany("receive_users")
                        .HasForeignKey("receive_user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ConJob.Entities.UserModel", "send_users")
                        .WithMany("send_users")
                        .HasForeignKey("send_user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("receive_users");

                    b.Navigation("send_users");
                });

            modelBuilder.Entity("ConJob.Entities.NotificationModel", b =>
                {
                    b.HasOne("ConJob.Entities.UserModel", "from_user_notifications")
                        .WithMany("from_user_notiofications")
                        .HasForeignKey("from_user_notifi_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ConJob.Entities.UserModel", "to_user_notiofications")
                        .WithMany("to_user_notiofications")
                        .HasForeignKey("to_user_notifi_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("from_user_notifications");

                    b.Navigation("to_user_notiofications");
                });

            modelBuilder.Entity("ConJob.Entities.Personal_skillModel", b =>
                {
                    b.HasOne("ConJob.Entities.SkillModel", "skills")
                        .WithMany("personal_Skills")
                        .HasForeignKey("skill_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConJob.Entities.UserModel", "users")
                        .WithMany("personal_skills")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("skills");

                    b.Navigation("users");
                });

            modelBuilder.Entity("ConJob.Entities.PostModel", b =>
                {
                    b.HasOne("ConJob.Entities.FileModel", "files")
                        .WithMany("oosts")
                        .HasForeignKey("file_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConJob.Entities.JobModel", "jobs")
                        .WithMany("posts")
                        .HasForeignKey("job_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConJob.Entities.UserModel", "users")
                        .WithMany("posts")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("files");

                    b.Navigation("jobs");

                    b.Navigation("users");
                });

            modelBuilder.Entity("ConJob.Entities.ReportModel", b =>
                {
                    b.HasOne("ConJob.Entities.PostModel", "posts")
                        .WithMany("reports")
                        .HasForeignKey("post_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConJob.Entities.UserModel", "users")
                        .WithMany("reports")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("posts");

                    b.Navigation("users");
                });

            modelBuilder.Entity("ConJob.Entities.UserRoleModel", b =>
                {
                    b.HasOne("ConJob.Entities.RoleModel", "roles")
                        .WithMany("user_roles")
                        .HasForeignKey("role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConJob.Entities.UserModel", "users")
                        .WithMany("user_roles")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("roles");

                    b.Navigation("users");
                });

            modelBuilder.Entity("ConJob.Entities.CategoryModel", b =>
                {
                    b.Navigation("jobs");
                });

            modelBuilder.Entity("ConJob.Entities.FileModel", b =>
                {
                    b.Navigation("oosts");
                });

            modelBuilder.Entity("ConJob.Entities.JobModel", b =>
                {
                    b.Navigation("applicants");

                    b.Navigation("posts");
                });

            modelBuilder.Entity("ConJob.Entities.PostModel", b =>
                {
                    b.Navigation("comments");

                    b.Navigation("likes");

                    b.Navigation("reports");
                });

            modelBuilder.Entity("ConJob.Entities.RoleModel", b =>
                {
                    b.Navigation("user_roles");
                });

            modelBuilder.Entity("ConJob.Entities.SkillModel", b =>
                {
                    b.Navigation("personal_Skills");
                });

            modelBuilder.Entity("ConJob.Entities.UserModel", b =>
                {
                    b.Navigation("applicants");

                    b.Navigation("comments");

                    b.Navigation("followers");

                    b.Navigation("following");

                    b.Navigation("from_user_notiofications");

                    b.Navigation("jobs");

                    b.Navigation("jwts");

                    b.Navigation("likes");

                    b.Navigation("personal_skills");

                    b.Navigation("posts");

                    b.Navigation("receive_users");

                    b.Navigation("reports");

                    b.Navigation("send_users");

                    b.Navigation("to_user_notiofications");

                    b.Navigation("user_roles");
                });
#pragma warning restore 612, 618
        }
    }
}
