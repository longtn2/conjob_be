// <auto-generated />
using System;
using ConJob.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ConJob.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240418071127_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ConJob.Entities.ApplicantModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("apply_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("change_on")
                        .HasColumnType("int");

                    b.Property<DateTime>("create_on")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("job_id")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("job_id");

                    b.HasIndex("user_id");

                    b.ToTable("Applicants");

                    b.HasData(
                        new
                        {
                            id = 1,
                            apply_date = new DateTime(2024, 4, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            job_id = 1,
                            status = "Mới nộp",
                            user_id = 2
                        },
                        new
                        {
                            id = 2,
                            apply_date = new DateTime(2024, 4, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            job_id = 2,
                            status = "Mới nộp",
                            user_id = 4
                        });
                });

            modelBuilder.Entity("ConJob.Entities.CategoryModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("change_on")
                        .HasColumnType("int");

                    b.Property<DateTime>("create_on")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            id = 1,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            description = "các ngành liên quan đến truyền thông",
                            name = "media"
                        },
                        new
                        {
                            id = 2,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            description = "Đây là cách gọi chung nhất cho người viết mã, sử dụng các ngôn ngữ lập trình để tạo ra các chương trình máy tính.",
                            name = "Programmer"
                        },
                        new
                        {
                            id = 3,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            description = " Đây là cách gọi chung cho những người tạo ra nội dung, bao gồm bài viết, hình ảnh, video, âm nhạc, v.v. Nội dung này có thể được sử dụng cho mục đích giải trí, giáo dục, quảng cáo hoặc kinh doanh",
                            name = "Content creator"
                        });
                });

            modelBuilder.Entity("ConJob.Entities.CommentModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("change_on")
                        .HasColumnType("int");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("create_on")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("post_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("post_id");

                    b.HasIndex("user_id");

                    b.ToTable("CommentModel");
                });

            modelBuilder.Entity("ConJob.Entities.FileModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("change_on")
                        .HasColumnType("int");

                    b.Property<DateTime>("create_on")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("size")
                        .HasColumnType("float");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Files");

                    b.HasData(
                        new
                        {
                            id = 1,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "anh datvila",
                            size = 100.0,
                            type = 1,
                            url = "https://media.2dep.vn/upload/thucquyen/2022/05/19/dat-villa-la-ai-hot-tiktoker-9x-trieu-view-co-chuyen-tinh-xuyen-bien-gioi-voi-ban-gai-indonesia-social-1652941149.jpg"
                        },
                        new
                        {
                            id = 2,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "anh thong soai ca",
                            size = 100.0,
                            type = 1,
                            url = "https://newsmd2fr.keeng.vn/tiin/archive/imageslead/2023/06/14/90_c373d5ac0433257417f21a0a5e07fa11.jpg"
                        });
                });

            modelBuilder.Entity("ConJob.Entities.FollowModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("change_on")
                        .HasColumnType("int");

                    b.Property<DateTime>("create_on")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("from_user_id")
                        .HasColumnType("int");

                    b.Property<int>("to_user_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("from_user_id");

                    b.HasIndex("to_user_id");

                    b.ToTable("Follows");

                    b.HasData(
                        new
                        {
                            id = 1,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            from_user_id = 2,
                            to_user_id = 3
                        },
                        new
                        {
                            id = 2,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            from_user_id = 2,
                            to_user_id = 4
                        },
                        new
                        {
                            id = 3,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            from_user_id = 3,
                            to_user_id = 4
                        },
                        new
                        {
                            id = 4,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            from_user_id = 3,
                            to_user_id = 5
                        });
                });

            modelBuilder.Entity("ConJob.Entities.JWTModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("change_on")
                        .HasColumnType("int");

                    b.Property<DateTime>("create_on")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("expired_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("token_hash_value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("user_id");

                    b.ToTable("JWTs");
                });

            modelBuilder.Entity("ConJob.Entities.JobModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<double>("budget")
                        .HasColumnType("float");

                    b.Property<int>("category_id")
                        .HasColumnType("int");

                    b.Property<int>("change_on")
                        .HasColumnType("int");

                    b.Property<DateTime>("create_on")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("expired_day")
                        .HasColumnType("datetime2");

                    b.Property<int>("job_type")
                        .HasColumnType("int");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("quanlity")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("category_id");

                    b.HasIndex("user_id");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            id = 1,
                            budget = 2000.0,
                            category_id = 1,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            description = "photograper làm để chụp ảnh cá xấu đang ăn",
                            expired_day = new DateTime(2024, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            job_type = 1,
                            location = "Bắc băng dương",
                            quanlity = 20,
                            status = "gần đầy",
                            title = "Đây là công việc về media",
                            user_id = 3
                        },
                        new
                        {
                            id = 2,
                            budget = 5000.0,
                            category_id = 2,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            description = "Code dự án Web trong 2 tháng",
                            expired_day = new DateTime(2024, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            job_type = 1,
                            location = "Ấn độ dương",
                            quanlity = 1,
                            status = "không một ai ",
                            title = "Đây là công việc liên quan đến Backend",
                            user_id = 5
                        });
                });

            modelBuilder.Entity("ConJob.Entities.LikeModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("change_on")
                        .HasColumnType("int");

                    b.Property<DateTime>("create_on")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("post_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("post_id");

                    b.HasIndex("user_id");

                    b.ToTable("Likes");

                    b.HasData(
                        new
                        {
                            id = 1,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            post_id = 1,
                            user_id = 4
                        },
                        new
                        {
                            id = 2,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            post_id = 1,
                            user_id = 3
                        },
                        new
                        {
                            id = 3,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            post_id = 1,
                            user_id = 5
                        });
                });

            modelBuilder.Entity("ConJob.Entities.MessageModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("change_on")
                        .HasColumnType("int");

                    b.Property<DateTime>("create_on")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("message_content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("receive_user_id")
                        .HasColumnType("int");

                    b.Property<int>("send_user_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("receive_user_id");

                    b.HasIndex("send_user_id");

                    b.ToTable("MessageModel");

                    b.HasData(
                        new
                        {
                            id = 1,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            message_content = "ê tao có công việc này ngon nè ",
                            receive_user_id = 3,
                            send_user_id = 2
                        },
                        new
                        {
                            id = 2,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            message_content = "Việc gì vậy?",
                            receive_user_id = 2,
                            send_user_id = 3
                        },
                        new
                        {
                            id = 3,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            message_content = "Đi múa lân 2 ngày cho lân sư đoàn, giá cả thương lượng",
                            receive_user_id = 3,
                            send_user_id = 2
                        },
                        new
                        {
                            id = 4,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            message_content = "Nghe cũng okela á.Tao muốn due giá là 200k cho 1 ngày . Mày chốt không",
                            receive_user_id = 2,
                            send_user_id = 3
                        },
                        new
                        {
                            id = 5,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            message_content = "Oke thôi.2h ngày 12th 5 nhé ",
                            receive_user_id = 3,
                            send_user_id = 2
                        },
                        new
                        {
                            id = 6,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            message_content = "oke chốt",
                            receive_user_id = 2,
                            send_user_id = 3
                        });
                });

            modelBuilder.Entity("ConJob.Entities.NotificationModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("UserModelid")
                        .HasColumnType("int");

                    b.Property<int>("change_on")
                        .HasColumnType("int");

                    b.Property<DateTime>("create_on")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("from_user_notifi_id")
                        .HasColumnType("int");

                    b.Property<bool>("is_accept")
                        .HasColumnType("bit");

                    b.Property<string>("notifi_content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("UserModelid");

                    b.HasIndex("from_user_notifi_id");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            id = 1,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            from_user_notifi_id = 2,
                            is_accept = false,
                            notifi_content = "node ",
                            status = false
                        },
                        new
                        {
                            id = 2,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            from_user_notifi_id = 3,
                            is_accept = false,
                            notifi_content = "node",
                            status = false
                        },
                        new
                        {
                            id = 3,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            from_user_notifi_id = 4,
                            is_accept = false,
                            notifi_content = "node",
                            status = false
                        });
                });

            modelBuilder.Entity("ConJob.Entities.Personal_skillModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("change_on")
                        .HasColumnType("int");

                    b.Property<DateTime>("create_on")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("desciption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("exp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("skill_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("skill_id");

                    b.HasIndex("user_id");

                    b.ToTable("Personal_skillModel");

                    b.HasData(
                        new
                        {
                            id = 1,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            desciption = "Trong suốt 2 năm làm nghề thì tôi khá tự tin với tài năng của mình",
                            exp = "2 năm ",
                            skill_id = 1,
                            user_id = 3
                        },
                        new
                        {
                            id = 2,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            desciption = "I'am The Best",
                            exp = "3 năm ",
                            skill_id = 2,
                            user_id = 2
                        },
                        new
                        {
                            id = 3,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            desciption = "Tôi là một người đa tài",
                            exp = "10 năm",
                            skill_id = 3,
                            user_id = 3
                        },
                        new
                        {
                            id = 4,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            desciption = "Người có năng khiếu từ nhỏ , siêu vippro",
                            exp = "từ lúc sinh ra ",
                            skill_id = 4,
                            user_id = 4
                        });
                });

            modelBuilder.Entity("ConJob.Entities.PostModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("caption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("change_on")
                        .HasColumnType("int");

                    b.Property<DateTime>("create_on")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("file_id")
                        .HasColumnType("int");

                    b.Property<bool>("is_actived")
                        .HasColumnType("bit");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("bit");

                    b.Property<int>("job_id")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("file_id");

                    b.HasIndex("job_id");

                    b.HasIndex("user_id");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            id = 1,
                            caption = "Là một người có trách nghiệm tôi luồn hoàn thành mọi việc một cách hoàn hảo",
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            file_id = 1,
                            is_actived = false,
                            is_deleted = false,
                            job_id = 1,
                            title = "Luôn là người có trách nghiệm , I'am vippro",
                            user_id = 2
                        },
                        new
                        {
                            id = 2,
                            caption = "Là một người đỉnh cao tôi tự tin , khoe cá tính",
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            file_id = 2,
                            is_actived = false,
                            is_deleted = false,
                            job_id = 2,
                            title = "Ai tuyển tôi không",
                            user_id = 5
                        });
                });

            modelBuilder.Entity("ConJob.Entities.ReportModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("change_on")
                        .HasColumnType("int");

                    b.Property<DateTime>("create_on")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("post_id")
                        .HasColumnType("int");

                    b.Property<string>("reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("post_id");

                    b.HasIndex("user_id");

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            id = 1,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            post_id = 1,
                            reason = "lừa đảo ",
                            user_id = 5
                        });
                });

            modelBuilder.Entity("ConJob.Entities.RoleModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("change_on")
                        .HasColumnType("int");

                    b.Property<DateTime>("create_on")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("role_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("role_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            id = 1,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            role_description = "Là admin cuyền lực.",
                            role_name = "Admin"
                        },
                        new
                        {
                            id = 2,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            role_description = "Là nole tư bản đi tìm kiếm miếng cơm manh áo.",
                            role_name = "TimViec"
                        },
                        new
                        {
                            id = 3,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            role_description = "Là tư bản đi kiếm những con chiêng ngoan đạo.",
                            role_name = "PhatViec"
                        });
                });

            modelBuilder.Entity("ConJob.Entities.SkillModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("change_on")
                        .HasColumnType("int");

                    b.Property<DateTime>("create_on")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            id = 1,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            description = "Content Creator là người sáng tạo nội dung cho các nền tảng như mạng xã hội, blog, website, YouTube, v.v. Họ có thể viết bài viết, quay video, chụp ảnh, livestream để thu hút người theo dõi và truyền tải thông điệp đến đông đảo người dùng",
                            name = "Content Creator"
                        },
                        new
                        {
                            id = 2,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            description = "Viết mã HTML, CSS và JavaScript: Đây là những ngôn ngữ lập trình cơ bản để xây dựng giao diện web. HTML tạo cấu trúc cho trang web, CSS định dạng giao diện và JavaScript tạo tính năng tương tác cho người dùng.",
                            name = "Front-end developer"
                        },
                        new
                        {
                            id = 3,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            description = "Người mẫu ảnh là những người có ngoại hình ưa nhìn, vóc dáng cân đối, làn da khỏe đẹp và thần thái cuốn hút. Họ được đào tạo bài bản về cách tạo dáng, biểu cảm trước ống kính máy ảnh để có thể truyền tải thông điệp của nhiếp ảnh gia hoặc thương hiệu một cách hiệu quả nhất.",
                            name = "Fashion Model"
                        },
                        new
                        {
                            id = 4,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            description = "người sử dụng máy ảnh để ghi lại hình ảnh, khoảnh khắc, sự kiện, v.v. Họ sử dụng kỹ năng và óc sáng tạo để tạo ra những bức ảnh đẹp mắt, truyền tải thông điệp hoặc lưu giữ kỷ niệm.",
                            name = "Photograper"
                        },
                        new
                        {
                            id = 5,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            description = "những người biểu diễn nghệ thuật múa, sử dụng chuyển động cơ thể, biểu cảm gương mặt và ngôn ngữ cơ thể để truyền tải thông điệp, cảm xúc và kể chuyện",
                            name = "Dance"
                        },
                        new
                        {
                            id = 6,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            description = "nhà sản xuất âm nhạc, hay còn được ví như người họa nên sản phẩm âm nhạc chất lượng.",
                            name = "Music Producer"
                        });
                });

            modelBuilder.Entity("ConJob.Entities.UserModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("avatar")
                        .HasColumnType("text");

                    b.Property<int>("change_on")
                        .HasColumnType("int");

                    b.Property<DateTime>("create_on")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("fcm_token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("first_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("gender")
                        .HasColumnType("int");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("is_email_confirmed")
                        .HasColumnType("bit");

                    b.Property<string>("last_name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("phone_number")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            id = 1,
                            address = "Hue",
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            dob = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            email = "admin@com.com",
                            first_name = "Admin",
                            gender = 0,
                            is_deleted = false,
                            is_email_confirmed = false,
                            last_name = "Dat",
                            password = "$2a$11$.CERnqT9ko9moKM9Vr9W2usgHwDekCCHqfQ1tY46Y8b3ilNrwoP3S",
                            phone_number = "0335487991"
                        },
                        new
                        {
                            id = 2,
                            address = "Hue",
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            dob = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            email = "apeacocke1@google.ca",
                            first_name = "Fawnia",
                            gender = 0,
                            is_deleted = false,
                            is_email_confirmed = false,
                            last_name = "Alexandros",
                            password = "$2a$11$59M5jGXVVWjPgKjsq5HjM.cKDMdDWARUrJlr8bwxjQGrzJs7oCCwi",
                            phone_number = "0354579415"
                        },
                        new
                        {
                            id = 3,
                            address = "Hue",
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            dob = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            email = "cpancoast2@wsj.com",
                            first_name = "Cazzie",
                            gender = 0,
                            is_deleted = false,
                            is_email_confirmed = false,
                            last_name = "Pancoast",
                            password = "$2a$11$5l6QfFCjlMSBGFz7SGe/veEXbLjHbEu/W1N6VVDisXnrm07LwrXki",
                            phone_number = "0354596415"
                        },
                        new
                        {
                            id = 4,
                            address = "Hue",
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            dob = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            email = "datmarri@google.ca",
                            first_name = "Marri",
                            gender = 0,
                            is_deleted = false,
                            is_email_confirmed = false,
                            last_name = "Dat",
                            password = "$2a$11$hakD80y4SA8aLFHGUYvqE.SPPbzWk0GU.kFduUvf2jIGj6/xvRyVu",
                            phone_number = "0354579415"
                        },
                        new
                        {
                            id = 5,
                            address = "Hue",
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            dob = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            email = "datkhongchin@google.ca",
                            first_name = "Dat",
                            gender = 0,
                            is_deleted = false,
                            is_email_confirmed = false,
                            last_name = "khong chin",
                            password = "$2a$11$cLZHjW0oU9AGusfjmYHsmOseT6rrB6BZ0CTPaIVpZ0qyk78/ZnNSy",
                            phone_number = "0354579415"
                        });
                });

            modelBuilder.Entity("ConJob.Entities.UserRoleModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("change_on")
                        .HasColumnType("int");

                    b.Property<DateTime>("create_on")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("role_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("role_id");

                    b.HasIndex("user_id");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            id = 1,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            role_id = 1,
                            user_id = 1
                        },
                        new
                        {
                            id = 2,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            role_id = 2,
                            user_id = 2
                        },
                        new
                        {
                            id = 3,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            role_id = 3,
                            user_id = 3
                        },
                        new
                        {
                            id = 4,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            role_id = 2,
                            user_id = 4
                        },
                        new
                        {
                            id = 5,
                            change_on = 0,
                            create_on = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            role_id = 3,
                            user_id = 5
                        });
                });

            modelBuilder.Entity("ConJob.Entities.ApplicantModel", b =>
                {
                    b.HasOne("ConJob.Entities.JobModel", "job")
                        .WithMany("applicants")
                        .HasForeignKey("job_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConJob.Entities.UserModel", "user")
                        .WithMany("applicants")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("job");

                    b.Navigation("user");
                });

            modelBuilder.Entity("ConJob.Entities.CommentModel", b =>
                {
                    b.HasOne("ConJob.Entities.PostModel", "post")
                        .WithMany("comments")
                        .HasForeignKey("post_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConJob.Entities.UserModel", "user")
                        .WithMany("comments")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("post");

                    b.Navigation("user");
                });

            modelBuilder.Entity("ConJob.Entities.FollowModel", b =>
                {
                    b.HasOne("ConJob.Entities.UserModel", "from_user_follow")
                        .WithMany("followers")
                        .HasForeignKey("from_user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ConJob.Entities.UserModel", "to_user_follow")
                        .WithMany("following")
                        .HasForeignKey("to_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("from_user_follow");

                    b.Navigation("to_user_follow");
                });

            modelBuilder.Entity("ConJob.Entities.JWTModel", b =>
                {
                    b.HasOne("ConJob.Entities.UserModel", "user")
                        .WithMany("jwts")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("ConJob.Entities.JobModel", b =>
                {
                    b.HasOne("ConJob.Entities.CategoryModel", "category")
                        .WithMany("jobs")
                        .HasForeignKey("category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConJob.Entities.UserModel", "user")
                        .WithMany("jobs")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("category");

                    b.Navigation("user");
                });

            modelBuilder.Entity("ConJob.Entities.LikeModel", b =>
                {
                    b.HasOne("ConJob.Entities.PostModel", "post")
                        .WithMany("likes")
                        .HasForeignKey("post_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConJob.Entities.UserModel", "user")
                        .WithMany("likes")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("post");

                    b.Navigation("user");
                });

            modelBuilder.Entity("ConJob.Entities.MessageModel", b =>
                {
                    b.HasOne("ConJob.Entities.UserModel", "receive_user")
                        .WithMany("receive_users")
                        .HasForeignKey("receive_user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ConJob.Entities.UserModel", "send_user")
                        .WithMany("send_users")
                        .HasForeignKey("send_user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("receive_user");

                    b.Navigation("send_user");
                });

            modelBuilder.Entity("ConJob.Entities.NotificationModel", b =>
                {
                    b.HasOne("ConJob.Entities.UserModel", null)
                        .WithMany("to_user_notiofications")
                        .HasForeignKey("UserModelid");

                    b.HasOne("ConJob.Entities.UserModel", "from_user_notification")
                        .WithMany("from_user_notiofications")
                        .HasForeignKey("from_user_notifi_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("from_user_notification");
                });

            modelBuilder.Entity("ConJob.Entities.Personal_skillModel", b =>
                {
                    b.HasOne("ConJob.Entities.SkillModel", "skill")
                        .WithMany("personal_Skills")
                        .HasForeignKey("skill_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConJob.Entities.UserModel", "user")
                        .WithMany("personal_skills")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("skill");

                    b.Navigation("user");
                });

            modelBuilder.Entity("ConJob.Entities.PostModel", b =>
                {
                    b.HasOne("ConJob.Entities.FileModel", "file")
                        .WithMany("posts")
                        .HasForeignKey("file_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConJob.Entities.JobModel", "job")
                        .WithMany("posts")
                        .HasForeignKey("job_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConJob.Entities.UserModel", "user")
                        .WithMany("posts")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("file");

                    b.Navigation("job");

                    b.Navigation("user");
                });

            modelBuilder.Entity("ConJob.Entities.ReportModel", b =>
                {
                    b.HasOne("ConJob.Entities.PostModel", "post")
                        .WithMany("reports")
                        .HasForeignKey("post_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConJob.Entities.UserModel", "user")
                        .WithMany("reports")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("post");

                    b.Navigation("user");
                });

            modelBuilder.Entity("ConJob.Entities.UserRoleModel", b =>
                {
                    b.HasOne("ConJob.Entities.RoleModel", "role")
                        .WithMany("user_roles")
                        .HasForeignKey("role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConJob.Entities.UserModel", "user")
                        .WithMany("user_roles")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("role");

                    b.Navigation("user");
                });

            modelBuilder.Entity("ConJob.Entities.CategoryModel", b =>
                {
                    b.Navigation("jobs");
                });

            modelBuilder.Entity("ConJob.Entities.FileModel", b =>
                {
                    b.Navigation("posts");
                });

            modelBuilder.Entity("ConJob.Entities.JobModel", b =>
                {
                    b.Navigation("applicants");

                    b.Navigation("posts");
                });

            modelBuilder.Entity("ConJob.Entities.PostModel", b =>
                {
                    b.Navigation("comments");

                    b.Navigation("likes");

                    b.Navigation("reports");
                });

            modelBuilder.Entity("ConJob.Entities.RoleModel", b =>
                {
                    b.Navigation("user_roles");
                });

            modelBuilder.Entity("ConJob.Entities.SkillModel", b =>
                {
                    b.Navigation("personal_Skills");
                });

            modelBuilder.Entity("ConJob.Entities.UserModel", b =>
                {
                    b.Navigation("applicants");

                    b.Navigation("comments");

                    b.Navigation("followers");

                    b.Navigation("following");

                    b.Navigation("from_user_notiofications");

                    b.Navigation("jobs");

                    b.Navigation("jwts");

                    b.Navigation("likes");

                    b.Navigation("personal_skills");

                    b.Navigation("posts");

                    b.Navigation("receive_users");

                    b.Navigation("reports");

                    b.Navigation("send_users");

                    b.Navigation("to_user_notiofications");

                    b.Navigation("user_roles");
                });
#pragma warning restore 612, 618
        }
    }
}
